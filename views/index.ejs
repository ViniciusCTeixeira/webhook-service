<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Webhook Viewer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        table, th, td {
            border: 1px solid black;
        }
        th, td {
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        button {
            margin-bottom: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
<h1>Webhook Requests</h1>
<button id="clearButton">Limpar Dados</button>
<table id="requestsTable">
    <tr>
        <th>Timestamp</th>
        <th>Method</th>
        <th>Path</th>
        <th>Headers</th>
        <th>Body</th>
    </tr>
    <% requests.forEach(request => { %>
        <tr>
            <td><%= request.timestamp %></td>
            <td><%= request.method %></td>
            <td><%= request.path %></td>
            <td><pre><%= JSON.stringify(request.headers, null, 2) %></pre></td>
            <td><pre><%= JSON.stringify(request.body, null, 2) %></pre></td>
        </tr>
    <% }) %>
</table>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    // Escuta novos eventos de requisição e atualiza a tabela
    socket.on('newRequest', (request) => {
        const table = document.getElementById('requestsTable');
        const newRow = table.insertRow(1);

        const timestampCell = newRow.insertCell(0);
        const methodCell = newRow.insertCell(1);
        const pathCell = newRow.insertCell(2);
        const headersCell = newRow.insertCell(3);
        const bodyCell = newRow.insertCell(4);

        timestampCell.textContent = request.timestamp;
        methodCell.textContent = request.method;
        pathCell.textContent = request.path;
        headersCell.innerHTML = `<pre>${JSON.stringify(request.headers, null, 2)}</pre>`;
        bodyCell.innerHTML = `<pre>${JSON.stringify(request.body, null, 2)}</pre>`;
    });

    // Escuta o evento de limpar requisições e limpa a tabela
    socket.on('clearRequests', () => {
        const table = document.getElementById('requestsTable');
        // Mantém apenas o cabeçalho da tabela
        while (table.rows.length > 1) {
            table.deleteRow(1);
        }
    });

    // Função para limpar os dados via POST request
    document.getElementById('clearButton').addEventListener('click', () => {
        fetch('/clear', { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                console.log(data.msg);
            })
            .catch(error => console.error('Erro ao limpar dados:', error));
    });
</script>
</body>
</html>